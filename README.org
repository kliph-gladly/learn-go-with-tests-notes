* Learn Go With Tests
Following along with https://quii.gitbook.io/learn-go-with-tests/

** Other resources
*** Simplicity in Go
- https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride
  - Interesting how this differs from Rich Hickey's [[https://www.youtube.com/watch?v=SxdOUGdseq4][Simple made Easy]]
  - Interesting how Go appears to expose all the under-the-hood stuff and leaves it up  to the dev to sort it out

* Hello, World
- Had to turn on yasnippet minor mode to have golang completions work
- I have my editor configured to display tabs as two spaces to make golang more accessible for me
- I have opted to edit files directly rather than tangling so that I can get the benefit of LSP integration in golang
  - [ ] There may be a good way to make it work inside Org-mode but I haven't investigated
  - Pretty cool to be able to see compiler errors in the editor without needing to run the tests :sunglasses:
- I have had to run =M-x projectile-invalidate-cache= occasionally to get Projectile to pick up the =.dir-locals= config for jumping between tests and impls.
** Go modules
- [ ] Can I get =go test= to report using dots?

To see a module's godocs:

#+begin_src sh
  godoc -http :8000
#+end_src

** Can I watch and rerun tests?
- Not through =go test= directly :(
- I can do some shenanigans with =fswatch= (an OS X tool, similar tools exist for other operating systems)
- Install with =brew install fswatch=

#+begin_src sh
  fswatch -o ./*.go | xargs -n1 -I{} go test
#+end_src

See https://emcrisostomo.github.io/fswatch/usage.html

** Hello, world... again
This is interesting:

#+begin_quote
=t.Helper()= is needed to tell the test suite that this method is a helper. By doing this when it fails the line number reported will be in our function call rather than inside our test helper. This will help other developers track down problems easier.
#+end_quote

This is a feature of Playwright that I prefer as well.

Doesn't look like Go has syntactic sugar for default values for function parameters :( https://stackoverflow.com/questions/19612449/default-value-in-gos-method#comment77755758_23650312

** One last refactor?
Finally breaking code out of this toy function that's already too large and concerned with too much.  The book illustrates that there are implicit returns in golang
#+begin_src go
  func greetingPrefix(language string) (prefix string) {
    switch language {
    case french:
      prefix = frenchHelloPrefix
    case spanish:
      prefix = spanishHelloPrefix
    default:
      prefix = englishHelloPrefix
    }
    return
  }
#+end_src

which will return the =prefix= because it's specified as a named return value to which I say, "Ewww!"  This is a language feature that I would discourage using because it makes it harder to reason about the code inplace.  You need to be aware of the call signature in order to interpret the =return= statement rather than simply interpreting the =return= statement by itself.

See https://github.com/golang/go/wiki/CodeReviewComments#named-result-parameters for more details.

* Integers
#+begin_quote
When you have more than one argument of the same type (in our case two integers) rather than having =(x int, y int)= you can shorten it to =(x, y int)=.
#+end_quote

I found this unclear. I thought it was saying =x= is any type rather than =int=.

** Implementing Repeat
I'd rather use reduce to construct a string like this.  The standard =strings= library https://cs.opensource.google/go/go/+/refs/tags/go1.19.5:src/strings/strings.go;l=528 uses a chunked approach to writing into a =Builder=. Doesn't look like Go has functional constructs like =reduce=.  Maybe there's a more idiomatically functional way to do this rather than imperatively iterating through a loop and concatenating strings.

Ah =make= seems sort of like what I want.  =make= and =range= feel a little bit like initializing a collection and then mapping over a collection to transform it into another collection.

* Arrays And Slices
** Refactoring to use a slice instead of an array of defined size (tuple?)
- [ ] If a function consumes a slice, why can't an array of defined size be passed to it?
  - It seems like something that a [[https://clojure.org/reference/sequences][seq-like abstraction]] could handle
** Coverage
#+begin_src sh
  go test -cover
#+end_src
** Feels like I'd reach for reduce
In order to avoid the kind of error-prone boundary checking, I almost always find it more advantageous to express this sort of computation as a reduce operation over the inputs.

* Structs, methods and interfaces

Go doesn't support function dispatch based on the argument type, something like multimethods in Clojure.

According to the book:
#+begin_quote
We have two choices:
- You can have functions with the same name declared in different packages. So we could create our Area(Circle) in a new package, but that feels overkill here.
- We can define methods on our newly defined types instead.
#+end_quote

The first choice seems like wasteful overhead.  Let's see what's up with methods.  Oh you just bind them on the struct.  That's not that complicated, but it forces tying abstract implementations to concrete types :/.  It seems like this would not allow for the flexibility that you can achieve with Clojure protocols.  Interfaces get some of the way there, just like they do in Clojure, but cannot be extended by consumers without opening up the initial implementation.

The book's author "would like to reiterate how great the compiler is here".  Go's compiler messages have been largely helpful.  It's not as fancy as Elm, but it seems pretty good.  It's as good or better than Typescript's compiler, but not as good as Haskell and other fancy compilers.

The syntax for declaring methods binds the method to a =receiver=.

** Public and private fields on structs
The public/private distinction applies to packages.  So a capitalized field is publicly available in an external package, a lower-case field is not.  I had previously thought that the public/private distinct applied to each entity itself.

* An Aside: Understanding go.sum and go.mod file in Go (Golang)
Following along at https://golangbyexample.com/go-mod-sum-module/

- =go.mod= specifies the root of a Go module.
  - It defines the module import path
  - The version of go with which the module was created
  - Dependency requirements for the module (including specific versions)

- =go.sum= lists the checksums of direct and indirect dependencies

#+begin_quote
Also please note that both go.mod as well as go.sum file should be checked into the Version Control System (VCS) such as git
#+end_quote

Note: when following the example, I needed to add =./learn= to the root =go.work= to make the imported dependency resolve properly.  Before I did this, I repeatedly got an error saying that no required module provides the package, even after following the =go get= instructions to install the package.

- [ ] It's not clear to me why I would need to install a package's indirect dependencies.  If they're not necessary to run the code that I'm imported, why would I need them.  If they are necessary, then why aren't they specified among the package's direct dependencies?

* Pointers & errors
Following along at https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/pointers-and-errors#write-the-test-first

Variables copy on calling in golang (maybe this isn't the right way to describe it, thinking of the [[https://en.wikipedia.org/wiki/Copy-on-write#:~:text=Copy%2Don%2Dwrite%20(COW,copy%22%20operation%20on%20modifiable%20resources.][copy on write]] sense).  In order to update state in a struct, you need to pass a pointer to the struct in memory so that updates mutate the original struct rather than a copy.  To achieve this, we use the =*Foo= receiver type =func (f *Foo)=.  Struct pointers are [[https://go.dev/ref/spec#Method_values][automatically dereferenced]] which leads to some convenience at the cost of some confusion (explicit vs. implicit dereference).

=Stringer= is how golang refers to the string representation of an struct.

https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully
